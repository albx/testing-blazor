@inject IJSRuntime Js

@if (!Items.Any())
{
    <h2>Nothing to do here...</h2>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>&nbsp;</th>
                <th>Title</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr class="@GetItemCssClass(item)">
                    <td><input type="checkbox" @onclick="@(() => MarkItemAsDone(item))" @bind="item.IsDone" /></td>
                    <td class="item-title">@item.Title</td>
                    <td>
                        <div class="btn-group">
                            <button type="button" disabled="@item.IsDone" @onclick="@(() => EditItem(item))" class="btn btn-primary">Edit</button>
                            <button type="button" @onclick="@(() => DeleteTodoItem(item))" class="btn btn-danger">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    [EditorRequired]
    public IEnumerable<TodoItem> Items { get; set; } = Array.Empty<TodoItem>();

    [Parameter]
    public EventCallback<TodoItem> OnTodoItemSelected { get; set; }

    [Parameter]
    public EventCallback<TodoItem> OnDeleteTodoItemConfirmed { get; set; }

    [Parameter]
    public EventCallback<TodoItem> OnTodoItemChanged { get; set; }

    async Task EditItem(TodoItem item) => await OnTodoItemSelected.InvokeAsync(item);

    async Task DeleteTodoItem(TodoItem item)
    {
        var result = await Js.InvokeAsync<bool>("confirm", $"You are going to delete item {item.Title}. Are you sure?");
        if (result)
        {
            await OnDeleteTodoItemConfirmed.InvokeAsync(item);
        }
    }

    async Task MarkItemAsDone(TodoItem item)
    {
        await OnTodoItemChanged.InvokeAsync(item);
    }

    string GetItemCssClass(TodoItem item) => item.IsDone ? "is-done" : string.Empty;
}
