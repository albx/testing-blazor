@page "/fetchdata"

@attribute [Authorize]
@inject IWeatherForecastClient Client
@inject PersistentComponentState State

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        State.RegisterOnPersisting(PersistForecasts);

        if (!State.TryTakeFromJson<WeatherForecast[]?>("weather-data", out var weatherForecasts))
        {
            weatherForecasts = await Client.GetWeatherForecastsAsync();
        }

        forecasts = weatherForecasts;
    }

    private Task PersistForecasts()
    {
        State.PersistAsJson("weather-data", forecasts);
        return Task.CompletedTask;
    }
}
